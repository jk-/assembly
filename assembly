Assembly Language:
For x86 Processors Sixth Edition

Kip R. Irvine

Chapter 1: Basic Concepts

MSB and LSB

Most significant bit
and Least significant bit

Most is on the left
Least is on the right

Integer Storage Types

byte        8-bits
word        16-bits
doubleword  32-bits
quadword    64-bits

A "word" is not "a word"

Unsigned Ranges:

byte        0-255
word        0-65535
doubleword  0-4294967295
quadword    0-18446744073709551615

Signed:
The MSB is the sign bit which tells us if the number is positive or negative.
0: positive
1: negative

Ranges:
byte        -128 to 127
word        -32768 to 32767
doubleword  -214744836448 to 2 billion
quadword    blah

Two's Complement Notation:
Trying to tell us that everything can be done by addition.

Steps:
Flip-bits (1's comp)
Add 1

1.4 Boolean Operations

NOT: ¬
AND: ∧
OR: ∨

"Order of operations":
NOT is first before parentheses

2.0 General Concepts

2.1.1 Basic Microcomputer Design

Contains:
Registers are contained in the CPU (limited number)

A high-frequency clock
A control unit
And an arithmetic logic unit

Clock: synchronizes the internal operations of the CPU with other system components.

Control Unit (CU): coordinates the sequence of steps involved in executing machine instructions.

Arithemtic logic unit (ALU): performs arithmetic operations.

CPU pins connect to the data bus, the control bus and the address bus.

The Memory Storage Unit (MSU) is where instructions and data are held while the computer program is running.

All processing of data takes place in the CPU. Programs residing in memory must be copied into the CPU before they can excute.

Bus: is a group of parallel wires that transfer data from one part of the computer to another.

There are usually four bus types:
Data
I/O
Control
Address


Data bus transfers instructions between the CPU and memory.

The I/O bus transfer bus data between the CPU and system inputs.

The control bus uses binary signals to sync actions of all devices attached to the system bus.

The address bus holds the addresses of instructions and data when the currently execting instruction transfer data between the CPU and memory.

CLOCK
Pulses at a constant rate. The basic unit of time is a "Machine Cycle" or "Clock Cycle". The length of the clock cycle is the time required for one compelte clock pulse.

A clock cycle is the time between one falling cycle and the next. (lambda in math λ).

The duration of a clock cycle is calc as the reciprocal of the clocks speed, which in turn measures in oscillations per second.

1 Billion times per second: 1GHz.

A machine cycle requires at leastt 1 clock cycle to execute and a few require in excess of 50 clocks).

Instructions requiring memory access often have empty clock cycles called wait states because of the differences in the speeds of the CPU, the system bus and memory circuits.


2.1.2 Instruction Execution Cycle

The execution of a single machine instruction can be divided into a sequence of individual operations called INSTRUCTION EXECUTION CYCLES.

Before executing a program is copied into memory.

The INSTRUCTION POINTER contains the address of the next instructions.

The INSTRUCTION QUEUE holds a group of instructions about to be executed.

Three basic types:
Fetch
Decode
Execute

When using memory, two more steps are required:
Fetch Operand
Store output operand

Fetch: The control unit (CU) fetches the next instruction from the queue and increments the pointer. Also called a program counter.

Decode: The control unit decodes the instructions function to determine what the instruction will do. The instructions input operands are passed to the ALU, and singals are sent to the ALU indicating the operation tobe performed.

Fetch Operand: If the instruction uses an input operand located in memory, the control unit uses a READ operation to retrive the operand and copy it into internal registers. Internal registers are not visible to programs.

Execute: The ALU executes the instructions using the named registers and internal registers as operands and sends the output to named reggisters and or memory. The ALU updates status flags providing inofmration about the processor state.
Store Output operand: If the output operand is in memory, the control unit uses a write operation to store the data.

loop
    fetch next instruction
    advanced the instruction pointer (IP)
    if memory needed, val memory
    execute instruction
    if result is memory, write resultt
continue loop

In order to read instructiosn from memory, an address is palced on the address bus.
next, The memory controller places the req  uested code on the data bus, making the code avail inside the code cache.
Instruction Pointer (IP) determines which instruction will be executed next.

2.1.3 Reading from Memory

Program throughput is often dependent on speed of memory access. CPU clock speed might be several gigahertz, whereas access to memory occurs over a system bus running at a much slower speed.

The CPU must wait one or more clock cycles until operands have been fetched from memory before the current instruction can complete its execution. The wasted clock cycles are called wait states.

Trailing Edges: A clock-cycle begins as the clock signal changes from high to low.

Conventional memory is slower than the CPU, computers use high-speech cache memory to hold the most recently used instructions and data. The first time a program reads a block of data, it leaves a copy in the cache. (L2/L3 Cache)


2.1.4 How Programs Run

Load and Execute Process

Command promtp program:
1. The OS searches for the programs filename in the current disk directory. if the file is not found it looks in the $PATH
2. Found: the OS retrieves basic information about the programs file.
3. OS determines the next available locattion in memory and loads the program file into emmory. itt allocates a block of memory to the program and enters information about the programs size and location intoa table called a DESCRIPTOR TABLE. The OS may adjust the values of pointers within the progam so they contain addresses of the program data.
4. OS begins execution of the progams first machine instruction. As soon as the program begin running it is called a process. The OS assigns the process an ID number (process ID).
5. Process runs by itself. It is the OS's job to track the execution of the process to respond to request from system resources.

Multitasking
A CPU can really execute only one instruction at a time, so a component of the operating system named the scheduler allocates a slice of CPU time (called a TIME SLICE) to each task. During a single titme slice, the CPU executes a block of isntructions, stopping when the time slice has ended.

Scheduling:
Round-Robin

The processor saves the state of each task before switching to a new one. A task's state consists of the contents of the procssor registers, program counter and status flags, along with references to the tasks memory segment.

2.2.1 Models of Operation

Three primary modes of operation:
Protected, real-addres mode and system management mode.

Protected Mode: Protected mode is the native state of the processor, in which all instructions and features are available. Programs are given seperate memory areas named segments, and the procesor prevents progams from referencing memory outside their assigned segments.

Virtual-8086 mode: While in protected mode, the processor can directly execute real-address mode software such as MS-DOS programs in a safe multitasking env.

real-Address mode: real-addres mode implements the programming environment of the processor with a few extra features, such as the abbility to switch into other modes. Progams running in real address mode can cause the OS to crash.

Systetm management mode: SMM provides OS with the mechanism for implementing functions such as power management and sytstem security.


2.2.2 Basic Execution Environment

Address Space
in 32-bit protected mode, a task or program can address a linear addres space of up to 4GBs. A technique called Extended Physical Addressing allows a total of 64 gigs of physical memory to be address. Real address mode can only address a range of 1 MByte.

Basic Program Execution Registers:

Registers are high-speed storage locations directly inside the CPU, designed to be accessed at much higher speeds than conventional memory. When a processing loop is optimized for speed, for example, loop counters are held in registers rather than variables.

Eight General Purpose Registers
Six Segment Registers
Processor Status Flags Register (EFFLAGS)
Instruction pointer (EIP)

32-Bit General-Purpose Registers
EAX         EBP
EBX         ESP
ECX         ESI
EDX         EDI

EFLAGS
EIP

16-bit Registers
CS      ES
SS      FS
DS      GS

General Purpose Registers (GPR's) are primarly used for arithemtic and data movement.

Portions of some registers can be addrsesed as 8-bit values.

32-BIT  16-BIT  8Bit High (H)   8Bit Low (L)
EAX     AX      AH              AL


Specialized uses:
EAX: is automatically used by multiplication and division instructions. Extended Accumulator Register
ECX: Loop Counter
ESI and EDI: used by high-speed memory transfer instructions. Extended Source Index and Extended Desitiontion Indxes.
EBP: used by high-level languages to reference function parameters and local variables on the stack. Extended Frame Pointer.

Segment Registers:
In real-address mode, 16-bit segment registers indicate base addresses of preassigned memory areas named segments. In protected mode, segment registers hold pointers to segment descfiptor tables. Some segments hold progarm instructions (code), others hold variables (data) and another segment named the STACK SEGMENT holds local function variables and function aprameters.

EIP (extended Instruction pointer): contains the address of the next instruction to be executed. Certain machine instructions manipulate the EIP, causing the program to branch to a new location.

EFLAGS register (FlAGS): consists of indivual binary bits that control the operation of the CPU or reflect the outcome of some CPU operation. Some instructions test and manipulate individual processor flags.

Control Flags: Control the CPUs operation. Can cause the CPU to break after every instruction executes, interrupt when arithmetic overflow is detected, enter virtual-8086 mode, and enter procted mode.

Direction and Interrupt Flags and be set in the EFLAGS.

Status Flags:
Overflow
Sign
Zero
Auxiliary Carry
Parity
Carry Flags

Carry Flag (CF): is set when the result of an unsigned arithemtic operation is too large to fit into the destination.

Overflow (OF) is set when the result of the signed arithmetic operation is too large or too small to fit into the destination.

Sign (SF) is set when the result of an arithmetic or logical operation generates a negative result.

Zero (ZF) is set when the result of the arithmetic or logical operation generates a result of zero.

Auxiliary Carry (AC) is set when an arithmetic operation causes a carry from bit 3 to bit 4 in an 8-bit operand.

Parity (PF) is set if the least -significant byte is the resul contains an even number of 1 bits. Otherswise, PF is clear. In general, it is used for error checking when there is a possibility tat data might be altered or corrupted. Used as a voltage checksum.

MMX Registers
Eight 64-bit MMX registers support special instructions called SIMD (Single-instruction, Multiple-Data)
MMX register names are in fact aliases to the same registers used by the floating-point unit.

2.2.3 Floating-Point Unit
FPU performs high-speed floating-point arithmetic. At one point a seperate coprocessor chip was required for this. now it has been integrated into the main processor chip.

Eight Floating-Point Data Registers:
ST(0)
ST(1)
...
ST(7)

2.2.4 overview of Intel Microprocessors

When a processor uses an 8-bit data bus to transfer a 32-bit integer to memory, the integer must be broken down into four parts, and four separate data transfer operations.

Hyperthreading and Multi-core Processing

A dual processor system contains two seperate physical computer processors, usually attached
to the same motherboard with its own socket. The computers OS will schedule two separate taks.

Hyper-Threading (HT) allows two tasks to execute on a traditional single processor at the same time. This appraoch is less expensive than a dual processor system, and it makes effecient use of the processors resources.

Dual Core refers to integrated circuit (IC) chips taht contain two complete physical computer processor chips in the same IC package. Sometimes Dual core has HT tech to have them appear as FOUR logical processors.

CISC and RISC
Complex Instruction Set Computer (CISC) design. The instruction set is large, and incudes a wide variety of memory addressing, shifting, arithmetic, data movement and logical operations.

CISC permits compiled programs to contain a relatively small number of instructions. A major disadvantage to CISC design is that complex instructions require a relatively long time to decode and excute. An interpreter inside the CPU written in a language called MICROCODE decodes and executes each machine isntruction.

Reduced Instruction Set Computer (RISC). Consists of a relatively small number of short, simple instructions that execute quickly. rather than using a microcode to decode and execute, a RISC processor directly decodes and excutes instructions using harware.

2.3 x86 Memory Management

20-bit Linear Address Calculation

An address refers to a single locationin memory, and x86 processors permit each byte location to have a separate address. The term for this is:

Byte-Addressable memory. In real address mod, the linear or absolute address is 20 bits, raninging from 0 to FFFFF hex. Programs cannot use linear addressed directly, so addresses are expressed using two 16-bit integers.

A 16-bit segment value placed in one of the segment registers (CS, DS, ES, SS)

A 16-bit offset value

The CPU automatically converts a segment-offset address to a 20-bit linear address. Suppose a variables hex segment offset address is 08F1:0100. The CPU multiplies the segment value by 16 (10 hex) and adds the product to the variables offset.

Three Segments:
Code
Data
Stack

Three Segment Registers:
CS
DS
SS

CS contains a 16-bit code segment address
DS contains a 16-bit data segment address
SS contains the 16-bit stack segment address

ES, FS, GS can point to alternate data segments, that is, segments taht supplment the default data segment.


2.3.2 Protected Mode

When running in a protected mode, the programs linear address space is 4GBs using address 0 to FFFFFFFF hex.

Flat Segmentation model
All segments are mapped to the entire 32-bit physcial address space of the computer. At least two segments are required one for code and one for data. Each segment is defined by a segment descriptor, a 64-bit integger stored in a table known as a global descriptor table (GDT).

All x86 architecture use a flat segmentation model.

Multi-Segment Model

MSM model, each task or program is given its own table of segment descriptors, called LOCAL DESCRIPTOR TABLE (LDT).

Each descriptor points to a segment, which can be distinct from all segments used by other processoes. Each segment descriptor specifies the exact size of its segment.

Segment:
3000 has size 2000 hex, which is computer as:

0002 x 1000 hex

Segment at 8000 has size A000 hex.

Paging

A feature that permits segments to be divided into 4,096-byte blocks of memory called pages. Paging permits the total memory used by all programs running at the same time to be much larger than the computers physical memory.

The complete collection of pages mapped by the OS is called VIRTUAL MEMORY.

Paging is a solution to a vexing problem. A program must be loaded into main memory before it can run, but memory is expensive.

Users want to be able to load numerous programs into memory and switch among them at will.

When a task is running, parts of it can be stored on disk if they are not currently in use. Parts of the task are paged (swapped) to disk.

When the processor begins to execute code that has been pages out of memory it issues a PAGE FAULT. Causing the page or pages containing the requred code or data to be loaded back into memory.


2.4 Components of x86 Computer

2.4.1 Motherboard

Motherboard Chihpset
Intel FMA uses an updated Memory Controller Hub (MCH). It can access dual-channel DDR2 memory, at an 800 MHz clock speed.

An I/O controller Hub uses intel matrixc storage technology (MST) to support six Serial ATA devices.

2.4.2 Video Output
2.4.3 Memory

ROM: permently burned into a chip and connect be erased.
EPROM: can be erased slowly with ultraviolet light and reprogrammed.
DRAM: commonly known as main memory, is where progams and data are kept when a program is running. It is inexpensive, but must be refreshed every millisecond to avoid losing its contents.
SRAM: is primarily for expensive high speed cache memory. It does not have to be reefreshed. CPUI cache memory is comproised of SRAM.
VRAM holds video data. it is dual ported, allowing one port to continuously refresh the display while another port writtes data to the display.
CMOS RAM on the system morterboard store system setup information. It is refreshed by a battery, so its contents are tained when the computers power is off.


2.4.4 I/O ports and devfice interfaces.

2.5.1 Levels of I/O Access

Three primary levels:
High-level language functions
Operating System
BIOS

High-level language functions: Such as C++ and JAva contains functions to perform i/o. These functions are portable becauset ehy work on a variety of different computers and are not dependent on any one OS.

OS: Programmers can call operating system functions from a library known as the API (application programming interface). The operating system provides high-level operating functions such as writing strings to files, reading string, etc.

BIOS: The BASIC-INPUT-OUTPUT-SYSTEM is as collection of low-level subroutines that communicate directly with hard devices. The BIOS is installed by thhe computers manfacturer and is tailored to fit the computesr hardware. OS typically communciate with the BIOS.

Device Drivers
programs that permitt hte OS to communicate directly with hardware drivers.

Programming at Muiltiple Levels

Assembly language programs have prower flexibility in the area of inpput-output programming.

Level 3: Call library functions to perform generattic text I/O and file based I/O. We supply such a library with this book.
Level 2: call operating system functions to perform generic text I/O and file-based I/O. If the OS uses a graphical interface, it has functions to display graphicsin a device-independent way.
Level 1: call BIOS functiosn to control device-specific features such as color, graphics and sound.
Level 0: Send and receive data from hardware ports.

3.0 Assembly Language Fundamentals


MOVED TO:
Introduction to 64 Bit Intel Assembly Language Programming for Linux




32 and 64 bit registers

64  32  16  8   8

RAX
    EAX
        AH
            AX | AL


64-BIT
R8 - R15, general purpose registers
    R8D - 16it
        R8W | R8B - 8it

RAW - Word
R8B - Byte


When is 64-bit mode using 32-bit Registers zeros the top 32 bits.

Proceedures, Video 1: Stacks
https://www.youtube.com/watch?v=7dLZRMDcY6c

Memory Layout:

Stack (high to down, procedure context)
Dynamic Data (HEAP) (low to high, varaibles called with new or malloc)
Static Data (global variables)
Literals ("example")
Instructions

Heap Meeting the Stack is a really bad thing (too deeply nested in procedures.. out of memory!!)

Instructions, literals, static data: initialized when program starts up

Dynamic data is managed by the progarm (us)

Stack is managed automatically by the compiler.

Instructions: Read-only and exec
Literals: Read-only, NOT exec
Static: Writeable, NOT exec
Dyanmic: Writeable; NOT exec
Stack: Writeable, NOT exec

Stack grows in a downward convention (address). Top of stack is at the bottom.

ESP always points to "top" element of stack.

pushl Src ; push long, 32-bit val

Value at Src, reg or memory location and adds to the top of stack and decrements ESP by -4

popl  Dest ; pop off stack

"Remove" val from top of stack and adjust up 4 byte. Remove is just "not referenced" because pointer moves.

Procedures, Video 2: call Stack
https://www.youtube.com/watch?v=XbZQ-EonR_I

Caller and Callee

Caller will setup some arguments to setup a callee.

Callee must know where to find args
callee must know where to find "return address"
caller must know where to find return val
Caller and callee run on the same CPU - use the SAME registters

The convention of where to leave/find things is called the PROCEDURE CALL LINKAGE

Procedure call:
<call>  <label>
label: address of the callee function

before: push return address onto the stack and save it. Address is the instruction immediately followed the call.

Jump to label

By convention values returned byh proceedures are placed in the EAX register. The caller has to make sure to save the register before calling the callee.

EAX is only 4-bytes. Anything bigger is to just return a pointer rather than the object itself.

Procedures, Video 3: Stack-based languages
https://www.youtube.com/watch?v=4zBG7ZAvURE

Stack-based languages
C, Pascal, java
Code must be re-entrant (recursion)
Need some place to store state of each instantiation.
+ Arguments
+ Local vars
+ Return pointer

Stack discipline:
State for a given procedure (above) that we need for a limited amount of time.
+ callee always returns before caller does

Stack allocated in FRAMES
    State for a single procedure instantiation

ebp: BASE pointer register to point to the bottom of the stack frame.

esp -> ebp after callee is done


Sequence:
RSI
RDX
RCX
r8
r9

The kernel destroys rxc and r11
The number of the syscall has to be passed in register %rax.

section .text
_start:
   ; write(1, message, 13)
   mov     rax, 1          ; syscall 1 is write
   mov     rdi, 1          ; file handle 1 is stdout
   mov     rsi, message    ; address of string to output
   mov     rdx, 13         ; number of bytes in the string
   syscall                 ; invoke OS to write the string
